// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Messages.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface IMInitSDKParam ()
+ (IMInitSDKParam *)fromList:(NSArray *)list;
+ (nullable IMInitSDKParam *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation IMInitSDKParam
+ (instancetype)makeWithIdentityID:(NSString *)identityID
    sign:(NSString *)sign
    nickName:(NSString *)nickName
    nickId:(NSString *)nickId
    device:(NSString *)device
    headIcon:(NSString *)headIcon
    phone:(NSString *)phone
    email:(NSString *)email
    langType:(NSNumber *)langType
    source:(NSString *)source
    extraInfo:(nullable NSDictionary<NSString *, NSString *> *)extraInfo {
  IMInitSDKParam* pigeonResult = [[IMInitSDKParam alloc] init];
  pigeonResult.identityID = identityID;
  pigeonResult.sign = sign;
  pigeonResult.nickName = nickName;
  pigeonResult.nickId = nickId;
  pigeonResult.device = device;
  pigeonResult.headIcon = headIcon;
  pigeonResult.phone = phone;
  pigeonResult.email = email;
  pigeonResult.langType = langType;
  pigeonResult.source = source;
  pigeonResult.extraInfo = extraInfo;
  return pigeonResult;
}
+ (IMInitSDKParam *)fromList:(NSArray *)list {
  IMInitSDKParam *pigeonResult = [[IMInitSDKParam alloc] init];
  pigeonResult.identityID = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.identityID != nil, @"");
  pigeonResult.sign = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.sign != nil, @"");
  pigeonResult.nickName = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.nickName != nil, @"");
  pigeonResult.nickId = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.nickId != nil, @"");
  pigeonResult.device = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.device != nil, @"");
  pigeonResult.headIcon = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.headIcon != nil, @"");
  pigeonResult.phone = GetNullableObjectAtIndex(list, 6);
  NSAssert(pigeonResult.phone != nil, @"");
  pigeonResult.email = GetNullableObjectAtIndex(list, 7);
  NSAssert(pigeonResult.email != nil, @"");
  pigeonResult.langType = GetNullableObjectAtIndex(list, 8);
  NSAssert(pigeonResult.langType != nil, @"");
  pigeonResult.source = GetNullableObjectAtIndex(list, 9);
  NSAssert(pigeonResult.source != nil, @"");
  pigeonResult.extraInfo = GetNullableObjectAtIndex(list, 10);
  return pigeonResult;
}
+ (nullable IMInitSDKParam *)nullableFromList:(NSArray *)list {
  return (list) ? [IMInitSDKParam fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.identityID ?: [NSNull null]),
    (self.sign ?: [NSNull null]),
    (self.nickName ?: [NSNull null]),
    (self.nickId ?: [NSNull null]),
    (self.device ?: [NSNull null]),
    (self.headIcon ?: [NSNull null]),
    (self.phone ?: [NSNull null]),
    (self.email ?: [NSNull null]),
    (self.langType ?: [NSNull null]),
    (self.source ?: [NSNull null]),
    (self.extraInfo ?: [NSNull null]),
  ];
}
@end

@interface IMPluginApiCodecReader : FlutterStandardReader
@end
@implementation IMPluginApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [IMInitSDKParam fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface IMPluginApiCodecWriter : FlutterStandardWriter
@end
@implementation IMPluginApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[IMInitSDKParam class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface IMPluginApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation IMPluginApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[IMPluginApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[IMPluginApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *IMPluginApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    IMPluginApiCodecReaderWriter *readerWriter = [[IMPluginApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void IMPluginApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<IMPluginApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.imchat_sdk_platform_interface.IMPluginApi.getPlatformVersion"
        binaryMessenger:binaryMessenger
        codec:IMPluginApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPlatformVersionWithError:)], @"IMPluginApi api (%@) doesn't respond to @selector(getPlatformVersionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getPlatformVersionWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.imchat_sdk_platform_interface.IMPluginApi.initSDK"
        binaryMessenger:binaryMessenger
        codec:IMPluginApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initSDKParam:error:)], @"IMPluginApi api (%@) doesn't respond to @selector(initSDKParam:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IMInitSDKParam *arg_param = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api initSDKParam:arg_param error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
